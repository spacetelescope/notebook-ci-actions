name: Full Notebook CI Pipeline

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      execution-mode:
        required: true
        type: string
      single-filename:
        required: false
        type: string
      build-html:
        required: false
        type: boolean
        default: true
      security-scan:
        required: false
        type: boolean
        default: true

    secrets:
      CASJOBS_USERID:
        required: false
      CASJOBS_PW:
        required: false

jobs:
  set-matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix_notebooks: ${{ steps.set-matrix.outputs.matrix_notebooks }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set-matrix
        run: |
          if [ -n "${{ inputs.single-filename }}" ]; then
            echo "matrix_notebooks=[\"${{ inputs.single-filename }}\"]" >> $GITHUB_OUTPUT
          else
            NOTEBOOKS=$(find notebooks/ -name '*.ipynb' | jq -R -s -c 'split("\n")[:-1]')
            echo "matrix_notebooks=$NOTEBOOKS" >> $GITHUB_OUTPUT
          fi

  validate-and-execute:
    needs: set-matrix
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        notebook: ${{ fromJson(needs.set-matrix.outputs.matrix_notebooks) }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: list_notebooks
        run: |
          NOTEBOOKS=$(find notebooks/ -name '*.ipynb' | jq -R -s -c 'split("\n")[:-1]')
          echo "notebooks=$NOTEBOOKS" >> $GITHUB_OUTPUT
      - name: Set matrix if full run
        if: ${{ inputs.execution-mode == 'full' && inputs.single-filename == '' }}
        run: |
          echo "matrix={\"include\":$(find notebooks/ -name '*.ipynb' | jq -R -s -c 'split("\n")[:-1] | map({notebook: .})')}" >> $GITHUB_OUTPUT
      - name: Set up uv
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ inputs.python-version }}
          enable-cache: true

      - name: Set up micromamba for HST environment
        if: ${{ github.repository == 'spacetelescope/hst_notebooks' }}
        uses: mamba-org/setup-micromamba@v2.0.4
        with:
          environment-name: ci-env
          init-shell: bash
          create-args: >-
            python=${{ inputs.python-version }}
            hstcal

      - name: Set up micromamba for standard environment
        if: ${{ github.repository != 'spacetelescope/hst_notebooks' }}
        uses: mamba-org/setup-micromamba@v2.0.4
        with:
          environment-name: ci-env
          init-shell: bash
          create-args: >-
            python=${{ inputs.python-version }}

      - name: Detect docs-only changes
        id: detect_docs_only
        if: github.event_name == 'pull_request'
        run: |
          # Get list of changed files in the PR
          git fetch origin ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          echo "Changed files: $CHANGED_FILES"
          DOCS_ONLY=true
          for file in $CHANGED_FILES; do
            case "$file" in
              *.md|*.yml|*.yaml|*.html|*.css|*.js|_config.yml|_toc.yml)
                # docs/static/config files, allow
                ;;
              *)
                # Any other file disables docs-only mode
                DOCS_ONLY=false
                break
                ;;
            esac
          done
          echo "DOCS_ONLY=$DOCS_ONLY" >> $GITHUB_ENV
          echo "docs-only=$DOCS_ONLY" >> $GITHUB_OUTPUT

      - name: Install Validation Dependencies
        if: env.DOCS_ONLY != 'true'
        run: |
          uv pip install jupyter nbval nbconvert bandit

      - name: Install per-notebook requirements
        if: env.DOCS_ONLY != 'true'
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/requirements.txt" ]; then
            echo "Installing requirements for $nb_dir"
            uv pip install -r "$nb_dir/requirements.txt"
          fi
      - name: Validate Notebook
        if: env.DOCS_ONLY != 'true'
        run: |
          uv run pytest --nbval --nbval-cell-timeout=4000 "${{ matrix.notebook }}"
      - name: Execute Notebook
        if: env.DOCS_ONLY != 'true'
        run: |
          uv run jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebook }}"
      - name: Security Scan
        if: env.DOCS_ONLY != 'true' && inputs.security-scan == true
        run: |
          nb="${{ matrix.notebook }}"
          uv run jupyter nbconvert --to script "$nb"
          py_file="${nb%.ipynb}.py"
          if [ -f "$py_file" ]; then
            uv run bandit "$py_file"
            rm -f "$py_file"
          fi

      - name: Push executed notebook to gh-storage branch
        if: (success() && inputs.build-html == true) || github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin gh-storage || git checkout --orphan gh-storage
          git checkout gh-storage || git checkout --orphan gh-storage
          nb_path="${{ matrix.notebook }}"
          git checkout gh-storage || git checkout --orphan gh-storage
          git add "$nb_path"
          git commit -m "Update executed notebook $nb_path [skip ci]" || echo "No changes to commit"
          for i in 1 2 3; do
            git pull --rebase origin gh-storage && break || sleep 2
          done
          git push --force origin gh-storage

  build-docs:
    needs: validate-and-execute
    if: needs.validate-and-execute.result == 'success' && inputs.build-html == true
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-storage
          fetch-depth: 0
      - name: Set up uv
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ inputs.python-version }}
          enable-cache: true
      - name: Build JupyterBook documentation
        run: |
          jupyter-book build . --path-output /tmp/local-ci-build

