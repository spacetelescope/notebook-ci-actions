on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gather changed files matching notebooks or requirements.txt.
      - name: changed-files
        id: get-changed-files
        uses: tj-actions/changed-files@v42
        with:
          separator: ","
          files: |
            **/*.ipynb
            **/requirements.txt

      # Process the changed file list to build a matrix of notebooks to execute.
      - name: set-matrix
        id: set-matrix
        shell: bash
        run: |
          # Convert the comma-separated list to an array.
          IFS=',' read -r -a files <<< "${{ steps.get-changed-files.outputs.all_changed_files }}"
          echo "Changed files: ${files[*]}"
          
          # Array to hold the notebooks that will be executed.
          notebooks=()
          notebook_changed=false
          
          # First, if any changed file is a notebook, add it.
          for file in "${files[@]}"; do
            if [[ "$file" == *.ipynb ]]; then
              notebook_changed=true
              notebooks+=("$file")
            fi
          done
          
          # If no notebook file changed, look for requirements.txt changes.
          if [ "$notebook_changed" = false ]; then
            for file in "${files[@]}"; do
              if [[ "$file" == *requirements.txt ]]; then
                dir=$(dirname "$file")
                echo "Found requirements file in folder '$dir'; gathering notebooks from that folder."
                # Find all notebooks in the folder (only that folder, not recursing).
                while IFS= read -r nb; do
                  notebooks+=("$nb")
                done < <(find "$dir" -maxdepth 1 -type f -name '*.ipynb')
              fi
            done
          fi
          
          # Remove duplicate entries.
          unique_notebooks=($(printf "%s\n" "${notebooks[@]}" | sort -u))
          
          if [ ${#unique_notebooks[@]} -eq 0 ]; then
            echo "No relevant changes found; skipping notebook execution."
          else
            echo "Notebooks selected for testing: ${unique_notebooks[*]}"
          fi
          
          # Build a JSON array for the matrix.
          matrix_json=$(jq --compact-output --null-input --args "${unique_notebooks[@]}")
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"
          
  notebook-execution:
    needs: gather-notebooks
    if: ${{ needs.gather-notebooks.outputs.matrix != '[]' }}
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          echo "DEBUG ---"
          pwd
          echo "Path to requirements: $(dirname "${{ matrix.notebooks }}")/requirements.txt"
          ls $(dirname "${{ matrix.notebooks }}")
          echo "---"
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
            pip install -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-install.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install pytest nbval nbconvert bandit

      - name: Scan with Bandit
        run: |
          pip install ipython
          jupyter nbconvert --to script "${{ matrix.notebooks }}"
          pyfile=$(echo "${{ matrix.notebooks }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii $pyfile
          
      - name: Validate notebooks
        run: |
          export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
          export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
          jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
          pytest --nbval --nbval-cell-timeout=4000 "${{ matrix.notebooks }}" 
         
      - name: Execute notebooks
        id: execute
        run: |
          export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
          export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
          if ! jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebooks }}"; then
            python .github/scripts/insert_failure_message.py "${{ matrix.notebooks }}"
          fi
          
      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add "${{ matrix.notebooks }}"
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"
          
      - name: Checkout only the file to the target branch
        run: |
          git checkout -f gh-storage
          git checkout @{-1} "${{ matrix.notebooks }}"
          
      - name: Commit and push modifications to target branch
        run: |
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"
          MAX_RETRIES=5
          RETRY_DELAY=10s
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
