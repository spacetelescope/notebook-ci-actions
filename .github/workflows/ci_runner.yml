on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false
      CITOKEN:
        required: true

#permissions:
#  id-token: write

  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Checkout PR code from the fork
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 50
          path: 'forked-repo'
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for public repos, PAT if needed for private

      ## routine to gather only the changed notebook files and supply them to the matrix
      - name: changed-files
        id: get-changed-files
        uses: tj-actions/changed-files@v42
        with:
          separator: ","
          files: |
            **/*.ipynb
          path: 'forked-repo'  # Point to the path where the fork's code is checked out

      ## convert the list of files to an array and push them into the matrix as a json object      
      - name: set-matrix
        id: set-matrix
        run: |
          IFS=',' read -r -a array <<< "${{ steps.get-changed-files.outputs.all_changed_files }}"
          echo "{$array}"
          echo "matrix=$(jq --compact-output --null-input '$ARGS.positional' --args -- \"${array[@]}\")" >> $GITHUB_OUTPUT
        working-directory: 'forked-repo'  # Ensure this step runs in the directory with the fork's code

  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: macos-latest
    permissions:
      contents: write
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          #ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 50
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5 ## needed for caching
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          ## Install the local requirements file
          echo DEBUG ---
          pwd ## print working directory
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-install.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          #pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          
      - name: Security testing with Bandit
        run: | 
          bandit "${{ matrix.notebooks }}"
          
      - name: Validate notebooks 
        run: |
         export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
         export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
         jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
         pytest --nbval "${{ matrix.notebooks }}" 
         
      - name: Execute notebooks
        id: execute
        run: |
          export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
          export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi
          
      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add ${{ matrix.notebooks }}
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

      - name: Checkout only the file to the target branch
        env:
          CITOKEN: ${{ secrets.CITOKEN }}
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git commit -m "Storing executed notebook"
          
          # Temporarily set the remote with the PAT included in the URL for authentication
          GIT_URL=$(git remote get-url origin)
          GIT_URL_WITH_TOKEN=${GIT_URL/https:\/\/github.com\//https:\/\/x-access-token:${CITOKEN}@github.com/}
          git remote set-url origin $GIT_URL_WITH_TOKEN
          
          MAX_RETRIES=5
          RETRY_DELAY=10s
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            }
          done
          
          # Revert the remote URL to its original state
          git remote set-url origin $GIT_URL
        #shell: /bin/bash -e {0}
