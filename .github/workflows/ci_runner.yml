on:
  workflow_call:
    inputs:  
      python-version:
        required: false
        type: string
        default: 3.11

    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          ref: ${{ github.event.pull_request.head.sha }}

      - id: set-matrix
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} '*.ipynb')
          files_json=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=matrix::${files_json}"

  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - name: Set up micromamba and install dependencies
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: hstcal
          create-args: >-
            -c conda-forge
            python=${{ inputs.python-version }}
            numpy=1.26.0
            hstcal
            jupyter
            pytest
            nbval
            nbconvert

      
      - name: Set up Python ${{ inputs.python-version }}
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ inputs.python-version }}
          enable-cache: true
      
      - name: Install dependencies
        env:
          PYDEVD_DISABLE_FILE_VALIDATION: 1
          SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          
          # Verify numpy version (for debugging)
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
          fi
          if [ -f $(dirname ${{ matrix.notebooks }})/requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          fi         
          
          uv pip install --system pytest
          uv pip install --system nbval
          uv pip install --system nbconvert

      - name: Monitor memory and disk usage every 10 seconds
        run: |
          while true; do
            # Memory usage
            memory=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
            echo "Memory Usage: $memory%"
            
            # Disk usage
            disk=$(df / | grep / | awk '{print $5}')
            echo "Disk Usage: $disk"
            
            sleep 10
          done &  # Run in background

      - name: Validate notebooks
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
          pytest --nbval --nbval-cell-timeout 4000 "${{ matrix.notebooks }}"

      - name: Execute notebooks
        id: execute
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi

      - name: Scan with Bandit
        run: |
          pip install ipython
          jupyter nbconvert --to script ${{ matrix.notebooks }}
          pyfile=$(echo "${{ matrix.notebooks }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii $pyfile
          
      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add ${{ matrix.notebooks }}
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

      - name: Checkout only the file to gh-storage
        run: |
          git checkout -f gh-storage
          git checkout @{-1} ${{ matrix.notebooks }}

      - name: Commit and push modifications to gh-storage
        run: |
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

          MAX_RETRIES=5
          RETRY_DELAY=10s
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
