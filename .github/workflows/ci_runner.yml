on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

#permissions:
#  id-token: write

  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    ## routine to gather only the changed notebook files and supply them to the matrix
    - name: changed-files
      id: get-changed-files
      uses: tj-actions/changed-files@v36
      with:
        separator: ","
        files: |
          **/*.ipynb
          notebooks/**/requirements.txt
    ## convert the list of files to an array and push them into the matrix as a json object      
    - name: set-matrix
      id: set-matrix
      run: |
        IFS=',' read -r -a array <<< "${{steps.get-changed-files.outputs.all_changed_files}}"
        echo "{$array}"
        echo "matrix=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${array[@]}")" >> $GITHUB_OUTPUT
  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4 ## needed for caching
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          ## Install the req's file IF its a req's file being modified
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          #pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          
      - name: Security testing with Bandit
        run: | 
          if [[ "${{ github.event.pull_request.head.ref }}" == *"/requirements.txt" ]]; then
            DIRNAME=$(dirname "${{ matrix.notebooks }}")
            for notebook in $find notebooks -name '*.ipynb'); do
              bandit $notebook
            done
          else
            bandit ${{ matrix.notebooks }}
          fi
          
      - name: Validate notebooks 
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == *"/requirements.txt" ]]; then
            DIRNAME=$(dirname "${{ matrix.notebooks }}")
            for notebook in $find notebooks -name '*.ipynb'); do
              jupyter nbconvert --clear-output --inplace  $notebook
              pytest --nbval $notebook
            done
          else
             jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
             pytest --nbval "${{ matrix.notebooks }}" 
          fi
         
      - name: Execute notebooks
        id: execute
        run: |
          export CASJOBS_PW=secrets.casjobs_userid
          export CASJOBS_USERID=secrets.casjobs_pw
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi
          
      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add ${{ matrix.notebooks }}
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

      - name: Checkout only the file to the target branch
        run: |
          git checkout gh-storage
          git checkout @{-1} ${{ matrix.notebooks }}

      - name: Commit and push modifications to target branch
        run: |
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"
          git push origin gh-storage --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
