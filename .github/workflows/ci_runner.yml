on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

#permissions:
#  id-token: write

  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    ## routine to gather only the changed notebook files and supply them to the matrix
    - name: changed-files
      id: get-changed-files
      uses: tj-actions/changed-files@v42
      with:
        separator: ","
        files: |
          **/*.ipynb
    ## convert the list of files to an array and push them into the matrix as a json object      
    - name: set-matrix
      id: set-matrix
      run: |
        IFS=',' read -r -a array <<< "${{steps.get-changed-files.outputs.all_changed_files}}"
        echo "{$array}"
        echo "matrix=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${array[@]}")" >> $GITHUB_OUTPUT
  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5 ## needed for caching
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          ## Install the local requirements file
          echo DEBUG ---
          pwd ## print working directory
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-install.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          #pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          
      - name: Security testing with Bandit
        run: | 
          bandit "${{ matrix.notebooks }}"
          
      - name: Validate notebooks 
        run: |
         export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
         export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
         jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
         pytest --nbval "${{ matrix.notebooks }}" 
         
      - name: Execute notebooks
        id: execute
        run: |
          export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
          export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi
          
