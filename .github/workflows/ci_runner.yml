on:
  workflow_call:
    inputs:  
      python-version:
        required: false
        type: string
        default: 3.11

    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

#permissions:
#  id-token: write

  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          ref: ${{ github.event.pull_request.head.sha }}

      - id: set-matrix
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} '*.ipynb')
          #files_json=$(echo $files | jq -R -s -c 'split("\n")[:-1]')
          files_json=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=matrix::${files_json}"
  notebook-execution:
    needs: gather-notebooks
    #if: ${{ fromJson(needs.gather-notebooks.outputs.matrix).length > 0 }}
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5 ## needed for caching
        with:
          python-version: ${{ inputs.python-version }}
            
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
        
      - name: Install dependencies
        run: |
          ## Install the local requirements file
          echo DEBUG ---
          pwd ## print working directory
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-install.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          #pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
            source /usr/share/miniconda/etc/profile.d/conda.sh
            conda create --yes --solver=classic -n hstcal -c conda-forge hstcal          
          fi
          
      - name: Create conftest.py dynamically to override nbval's timeout
        run: |
          cat > $(dirname "${{ matrix.notebooks }}")/conftest.py << 'EOF'
          from nbclient import NotebookClient

          print("Custom conftest.py loaded")

          class CustomNotebookClient(NotebookClient):
              def __init__(self, *args, **kwargs):
                  kwargs.setdefault("iopub_timeout", 300)  #Set timeout to 300 seconds (?!)
                  super().__init__(*args, **kwargs)
          
          def pytest_configure(config):
              config._nbclient_class = CustomNotebookClient
          EOF
          #pytest --collect-only
          
      - name: Validate notebooks 
        run: |
         if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
            source /usr/share/miniconda/etc/profile.d/conda.sh
            conda init
            conda activate hstcal
         fi
         export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
         export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
         jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
         pytest --nbval --nbval-cell-timeout 4000 "${{ matrix.notebooks }}" 
         
      - name: Execute notebooks
        id: execute
        run: |
         if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
            source /usr/share/miniconda/etc/profile.d/conda.sh
            conda init
            conda activate hstcal
         fi        
          export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
          export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi

      - name: Scan with Bandit
        run: |
          pip install ipython
          jupyter nbconvert --to script ${{ matrix.notebooks }}
          pyfile=$(echo "${{ matrix.notebooks }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii $pyfile
