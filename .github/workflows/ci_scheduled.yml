name: Scheduled Notebook Execution
on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false
env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
  
permissions: write-all  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: echo "matrix=$(find notebooks -name "*.ipynb" | jq -cnR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
  scheduled-notebook-execution:
    needs: gather-notebooks
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - uses: actions/checkout@v3

      - name: Set up micromamba and install dependencies
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: hstcal-env
          create-args: >-
            -c conda-forge
            python=${{ inputs.python-version }}
            numpy=1.26.0
            ginga=3.4.0
            hstcal
            jupyter
            pytest
            nbval
            nbconvert
            stwcs
            drizzlepac
      
      - name: Set up Python ${{ inputs.python-version }}
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ inputs.python-version }}
          enable-cache: true
      
      - name: Install dependencies
        env:
          PYDEVD_DISABLE_FILE_VALIDATION: 1
          SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal-env
          
          # Make sure we have a consistent numpy installation from micromamba only
          # Avoid using pip for numpy to prevent binary compatibility issues
          micromamba install -c conda-forge numpy=1.26.0 ginga=3.4.0
          
          # Verify numpy version (for debugging)
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f pre-requirements.txt ]; then
            # Exclude numpy from requirements to avoid overwriting
            grep -v numpy pre-requirements.txt > pre-requirements-filtered.txt || true
            uv pip install --system --no-build-isolation -r pre-requirements-filtered.txt
          fi
          
          # Filter out numpy and handle ginga package versions correctly
          if [ -f $(dirname ${{ matrix.notebooks }})/requirements.txt ]; then
            # Fix numpy and ginga in requirements - replace broken ginga==4.0.1 with working version
            grep -v numpy $(dirname ${{ matrix.notebooks }})/requirements.txt | grep -v ginga > requirements-filtered.txt || true
            uv pip install --system --no-build-isolation -r requirements-filtered.txt
          fi
          
          # Install specific packages needed for notebooks that might have compatibility issues
          uv pip install --system --no-build-isolation stwcs drizzlepac
          
          uv pip install --system pytest
          uv pip install --system nbval
          uv pip install --system nbconvert

         

          
      - name: Clean pycache
        run: |
          find . -type d -name "__pycache__" -exec rm -rf {} +
          
      - name: Execute notebooks
        run: |
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebooks }}"

      - name: Validate notebooks
        run: |
          pytest --nbval "${{ matrix.notebooks }}"
