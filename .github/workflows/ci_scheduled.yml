name: Notebook Execution with Fallback

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: "CASJOBS user ID"
        required: false
      CASJOBS_PW:
        description: "CASJOBS password"
        required: false

jobs:
  gather-notebooks:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          # Find all notebooks under the "notebooks" directory
          notebooks=$(find notebooks -name "*.ipynb" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=$notebooks" >> $GITHUB_OUTPUT

  run-notebooks-ubuntu:
    name: Run Notebooks on ubuntu-20.04
    needs: gather-notebooks
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
      fail-fast: false
    # Continue on error so that each matrix job completes and we can record failures.
    continue-on-error: true
    outputs:
      failed: ${{ steps.collect.outputs.failed }}
    steps:
      - uses: actions/checkout@v4
      - name: Pre-job Cleanup
        run: |
          rm -rf ~/.cache/pip || true
          # Remove only files owned by the runner from /tmp.
          find /tmp -maxdepth 1 -user $(whoami) -type f -exec rm -f {} \; || true
      - name: Ensure pip cache folder exists
        run: mkdir -p ~/.cache/pip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
      - name: Install Dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          [ -f "$nb_dir/pre-requirements.sh" ] && chmod +x "$nb_dir/pre-requirements.sh" && "$nb_dir/pre-requirements.sh"
          [ -f "$nb_dir/pre-requirements.txt" ] && pip install -r "$nb_dir/pre-requirements.txt"
          pip install -r "$nb_dir/requirements.txt"
          pip install nbconvert
      - name: Execute Notebook with Monitoring
        id: exec
        run: |
          cat << 'EOF' > run_notebook.sh
          #!/usr/bin/env bash
          # --- Monitoring thresholds ---
          MEM_THRESHOLD=80
          DISK_THRESHOLD=90
          CLEANUP_DISK_THRESHOLD=85
          NOTEBOOK="${{ matrix.notebook }}"
          rm -f killed.flag

          echo "Pre-check: Memory: $(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')%, Disk: $(df / | tail -1 | awk '{print $5}' | sed 's/%//')%."
          current_mem=$(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')
          current_disk=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
          if [ "$current_mem" -ge "$MEM_THRESHOLD" ] || [ "$current_disk" -ge "$DISK_THRESHOLD" ]; then
              echo "Pre-check failed: Resources already high."
              exit 1
          fi

          trap 'echo "Received termination signal"; exit 1' SIGTERM SIGINT

          monitor() {
            while [ -z "$nb_pid" ]; do sleep 0.1; done
            while true; do
              mem_usage=$(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')
              if [ "$mem_usage" -ge "$MEM_THRESHOLD" ]; then
                echo "Monitor: Memory usage $mem_usage% exceeds threshold $MEM_THRESHOLD%. Killing process $nb_pid."
                touch killed.flag
                kill -9 $nb_pid
                break
              fi
              disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
              if [ "$disk_usage" -ge "$DISK_THRESHOLD" ]; then
                echo "Monitor: Disk usage $disk_usage% exceeds threshold $DISK_THRESHOLD%. Killing process $nb_pid."
                touch killed.flag
                kill -9 $nb_pid
                break
              elif [ "$disk_usage" -ge "$CLEANUP_DISK_THRESHOLD" ]; then
                echo "Monitor: Disk usage $disk_usage% exceeds cleanup threshold $CLEANUP_DISK_THRESHOLD%. Attempting cleanup."
                rm -rf ~/.cache/pip 2>/dev/null
                find /tmp -maxdepth 1 -user $(whoami) -type f -exec rm -f {} \; 2>/dev/null
                sleep 1
                disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
                if [ "$disk_usage" -ge "$CLEANUP_DISK_THRESHOLD" ]; then
                  echo "Monitor: After cleanup, disk usage remains $disk_usage%. Killing process $nb_pid."
                  touch killed.flag
                  kill -9 $nb_pid
                  break
                else
                  echo "Monitor: Cleanup successful; disk usage is now $disk_usage%."
                fi
              fi
              sleep 1
            done
          }

          # Launch notebook execution.
          jupyter nbconvert --template classic --to html --execute "$NOTEBOOK" 2>&1 | tee output.log &
          nb_pid=$!
          monitor &
          monitor_pid=$!
          wait $nb_pid
          rc=$?
          kill $monitor_pid 2>/dev/null
          if [ -f killed.flag ]; then
            echo "Notebook was killed by monitor."
            rc=1
          fi
          exit $rc
          EOF
          chmod +x run_notebook.sh
          ./run_notebook.sh
      - name: Collect Failures
        id: collect
        run: |
          if [ $? -ne 0 ]; then
            echo "${{ matrix.notebook }}" > failure.txt
          fi
          FAILED=$(cat failure.txt 2>/dev/null || echo "")
          echo "::set-output name=failed::$FAILED"
      - name: Upload Failure Artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failure-${{ replace(matrix.notebook, '/', '-') }}
          path: failure.txt

  run-notebooks-16gb:
    name: Run Notebooks on 16GB Runner
    needs: run-notebooks-ubuntu
    if: ${{ needs.run-notebooks-ubuntu.outputs.failed != '' }}
    runs-on: jwst-pipeline-notebooks-16gb
    steps:
      - uses: actions/checkout@v4
      - name: Run Fallback Notebook on 16GB
        run: |
          NB="${{ needs.run-notebooks-ubuntu.outputs.failed }}"
          echo "Re-running failed notebook on 16GB: $NB"
          jupyter nbconvert --template classic --to html --execute "$NB"

  run-notebooks-32gb:
    name: Run Notebooks on 32GB Runner
    needs: run-notebooks-16gb
    if: ${{ needs.run-notebooks-16gb.outputs.failed != '' }}
    runs-on: jwst-pipeline-notebooks-32gb
    steps:
      - uses: actions/checkout@v4
      - name: Run Fallback Notebook on 32GB
        run: |
          NB="${{ needs.run-notebooks-16gb.outputs.failed }}"
          echo "Re-running failed notebook on 32GB: $NB"
          jupyter nbconvert --template classic --to html --execute "$NB"
