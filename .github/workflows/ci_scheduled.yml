name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
jobs:
  test-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    continue-on-error: true  # Allow other notebooks to continue even if one fails
    outputs:
      resource_failure: ${{ steps.monitor_resources.outputs.resource_failure }}  # Pass the result as output
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        pip install -r "$notebook_dir/requirements.txt"

    - name: Run memory and disk monitoring alongside notebook execution
      id: monitor_resources
      run: |
        monitor_resources() {
          while true; do
            memory_usage=$(free -m | grep Mem | awk '{print $3/$2 * 100.0}')
            disk_usage=$(df / | grep / | awk '{print $5}' | sed 's/%//')
            echo "Memory usage: ${memory_usage}%"
            echo "Disk usage: ${disk_usage}%"
  
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, stopping execution..."
              echo "RESOURCE_FAILURE=true" >> $GITHUB_ENV  # Set the flag indicating failure
              echo "resource_failure=true" >> $GITHUB_ENV  # Pass the flag to outputs
              if [ -z "$JUPYTER_PID" ]; then
                echo "Error: nbconvert PID not found. Skipping kill of nbconvert process."
              else
                kill_process $JUPYTER_PID
              fi
              break
            fi
            sleep 10
          done
        }

        kill_process() {
          PID=$1
          if [ -z "$PID" ]; then
            echo "No PID provided. Skipping kill."
            return 0
          fi
          if ps -p $PID > /dev/null; then
            kill $PID || echo "Failed to kill process."
          else
            echo "Process with PID: $PID already terminated."
          fi
        }

        monitor_resources &  # Run monitoring in the background
        MONITOR_PID=$!  # Capture the PID of the monitoring process

        notebook_path="${{ matrix.notebook }}"
        jupyter nbconvert --to notebook --execute "$notebook_path" &
        JUPYTER_PID=$!

        wait $JUPYTER_PID  # Wait for the notebook execution to complete

        # Only kill the monitoring process if it's still running
        if ps -p $MONITOR_PID > /dev/null; then
          echo "Killing the monitor process (PID: $MONITOR_PID)"
          kill $MONITOR_PID
        else
          echo "Monitor process already terminated or not running."
        fi
