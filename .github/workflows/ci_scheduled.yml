name: Notebook Execution with Fallback

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate matrix from notebooks/
        id: set-matrix
        run: |
          # Find all .ipynb files under the notebooks/ directory and build a JSON array of objects.
          # Each object has a "notebook" key.
          matrix=$(find notebooks -type f -name "*.ipynb" | jq -R -s -c 'split("\n") | map(select(length > 0) | { notebook: . })')
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  run-notebook:
    needs: generate-matrix
    # Skip this job if the matrix is empty (dummy value will be set to "skip")
    if: ${{ matrix.notebook != 'skip' }}
    strategy:
      # If the generated array is non-empty, use it; otherwise, use a dummy value.
      matrix: ${{ length(fromJson(needs.generate-matrix.outputs.matrix)) > 0 && fromJson(needs.generate-matrix.outputs.matrix) || [ { notebook: "skip" } ] }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install notebook dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/requirements.txt" ]; then
            echo "Installing requirements from $nb_dir/requirements.txt"
            pip install -r "$nb_dir/requirements.txt"
          else
            echo "No requirements.txt found in $nb_dir, skipping dependency install."
          fi

      - name: Execute notebook with resource monitoring
        env:
          NOTEBOOK: ${{ matrix.notebook }}
        run: |
          NB_CONVERT_PID=0
          monitor() {
            while sleep 5; do
              mem_usage=$(free | awk '/^Mem/ {printf "%.0f", $3/$2 * 100}')
              disk_usage=$(df / | tail -1 | awk '{print $5}' | tr -d '%')
              if [ "$mem_usage" -gt 80 ] || [ "$disk_usage" -gt 80 ]; then
                echo "Resource usage exceeded threshold (Mem: ${mem_usage}%, Disk: ${disk_usage}%). Killing nbconvert (PID: $NB_CONVERT_PID)"
                kill -9 $NB_CONVERT_PID || true
              fi
            done
          }
          monitor &
          MONITOR_PID=$!
          echo "Monitor started (PID: $MONITOR_PID)"
          
          python -m nbconvert --to notebook --execute "$NOTEBOOK" --output executed.ipynb &
          NB_CONVERT_PID=$!
          echo "Started nbconvert (PID: $NB_CONVERT_PID) for notebook: $NOTEBOOK"
          
          wait $NB_CONVERT_PID
          RESULT=$?
          
          kill $MONITOR_PID || true
          
          exit $RESULT

      - name: Archive executed notebook
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: executed-notebook-${{ matrix.notebook }}
          path: executed.ipynb

  fallback-run:
    needs: run-notebook
    # Only run fallback if there were notebooks to process and the primary job failed
    if: ${{ matrix.notebook != 'skip' && failure() }}
    strategy:
      matrix: ${{ length(fromJson(needs.generate-matrix.outputs.matrix)) > 0 && fromJson(needs.generate-matrix.outputs.matrix) || [ { notebook: "skip" } ] }}
      fail-fast: false
    runs-on: jwst-pipeline-notebooks-16gb
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ inputs.python-version }} (Fallback)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install notebook dependencies (Fallback)
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/requirements.txt" ]; then
            echo "Installing requirements from $nb_dir/requirements.txt"
            pip install -r "$nb_dir/requirements.txt"
          else
            echo "No requirements.txt found in $nb_dir, skipping dependency install."
          fi

      - name: Execute notebook with resource monitoring (Fallback)
        env:
          NOTEBOOK: ${{ matrix.notebook }}
        run: |
          NB_CONVERT_PID=0
          monitor() {
            while sleep 5; do
              mem_usage=$(free | awk '/^Mem/ {printf "%.0f", $3/$2 * 100}')
              disk_usage=$(df / | tail -1 | awk '{print $5}' | tr -d '%')
              if [ "$mem_usage" -gt 80 ] || [ "$disk_usage" -gt 80 ]; then
                echo "Resource usage exceeded threshold (Mem: ${mem_usage}%, Disk: ${disk_usage}%). Killing nbconvert (PID: $NB_CONVERT_PID)"
                kill -9 $NB_CONVERT_PID || true
              fi
            done
          }
          monitor &
          MONITOR_PID=$!
          echo "Monitor started (PID: $MONITOR_PID)"
          
          python -m nbconvert --to notebook --execute "$NOTEBOOK" --output executed.ipynb &
          NB_CONVERT_PID=$!
          echo "Started nbconvert (PID: $NB_CONVERT_PID) for notebook: $NOTEBOOK"
          
          wait $NB_CONVERT_PID
          RESULT=$?
          
          kill $MONITOR_PID || true
          
          exit $RESULT

      - name: Archive executed notebook (Fallback)
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: executed-notebook-fallback-${{ matrix.notebook }}
          path: executed.ipynb
