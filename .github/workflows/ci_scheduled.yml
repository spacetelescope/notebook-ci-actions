name: Scaled - Execute Jupyter Notebooks
on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false
env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      runner-config: ${{ steps.parse-config.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: echo "matrix=$(find notebooks -name "*.ipynb" | jq -cnR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
  #      run: echo "matrix=$(find notebooks -name "*.ipynb" | jq --compact-output --null-input '$ARGS.positional' --args -- "${array[@]}")" >> $GITHUB_OUTPUT
     
      - name: Parse CI Config
        id: parse-config
        run: |
          # Convert ci_config.txt to JSON with group structure
          config=$(cat ci_config.txt | jq -R 'split(":") | { (.[0]): { "group": .[1] } }' | jq -s 'reduce .[] as $item ({}; . + $item) + {"default": {"group": "ubuntu-latest"}}' | jq -c .)
          echo "config<<EOF" >> $GITHUB_OUTPUT
          echo "$config" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          
  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: ${{ fromJson(needs.gather-notebooks.outputs.runner-config)[matrix.notebooks] || fromJson(needs.gather-notebooks.outputs.runner-config).default }}
    #runs-on:  ${{ fromJson(needs.gather-notebooks.outputs.runner-config)[matrix.notebooks] || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
          notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5 ## needed for caching
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          ## Install the local requirements file
          echo DEBUG ---
          pwd ## print working directory
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
            pip install -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
          fi
          if [ -f pre-requirements.txt ]; then
            pip install -r pre-requirements.txt
            echo Found Pre-Reqs
          fi
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          pip install ipykernel


      - name: Execute notebooks
        run: |
          export CASJOBS_PW="$CI_CASJOBS_PW"
          export CASJOBS_USERID="$CI_CASJOBS_USERID"
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebooks }}"
          
      - name: Validate notebooks 
        run: |
         pytest --nbval "${{ matrix.notebooks }}" 

      - name: Scan with Bandit
        run: |
          pip install ipython
          jupyter nbconvert --to script ${{ matrix.notebooks }}
          pyfile=$(echo "${{ matrix.notebooks }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii $pyfile
