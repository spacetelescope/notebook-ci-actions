name: Scheduled Notebook Execution

on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

permissions: write-all

##############################
# 1. Gather Notebooks to Run
##############################
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          # Find all .ipynb files under the notebooks folder.
          notebooks=$(find notebooks -name "*.ipynb" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=$notebooks" >> $GITHUB_OUTPUT

####################################################
# 2. First Attempt: Run Notebooks on ubuntu-latest
####################################################
  run-notebooks-ubuntu:
    name: Run Notebooks on ubuntu-latest
    needs: gather-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
      fail-fast: false
    # Allow failures so we can collect notebooks that need a fallback
    continue-on-error: true
    outputs:
      failedList: ${{ steps.collect_failures.outputs.failedList }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          [ -f "$nb_dir/pre-requirements.sh" ] && chmod +x "$nb_dir/pre-requirements.sh" && "$nb_dir/pre-requirements.sh"
          [ -f "$nb_dir/pre-requirements.txt" ] && pip install -r "$nb_dir/pre-requirements.txt"
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook with Resource Monitoring
        id: exec
        run: |
          cat << 'EOF' > run_notebook.sh
          #!/usr/bin/env bash
          MEM_THRESHOLD=80
          DISK_THRESHOLD=90
          CLEANUP_DISK_THRESHOLD=85  # When disk usage exceeds this, attempt cleanup

          # Trap termination signals.
          trap 'echo "Received termination signal"; exit 1' SIGTERM SIGINT

          monitor() {
            while true; do
              # Check memory usage.
              mem_usage=$(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')
              if [ "$mem_usage" -gt "$MEM_THRESHOLD" ]; then
                echo "Memory usage is at ${mem_usage}%, exceeding threshold of ${MEM_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              fi

              # Check disk usage.
              disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
              if [ "$disk_usage" -gt "$DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding threshold of ${DISK_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              elif [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding cleanup threshold of ${CLEANUP_DISK_THRESHOLD}%. Attempting cleanup."
                # Example cleanup: remove pip cache
                rm -rf ~/.cache/pip || echo "Unable to clean pip cache"
                sleep 2
                disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
                if [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                  echo "After cleanup, disk usage is still at ${disk_usage}%. Aborting notebook execution."
                  kill $nb_pid 2>/dev/null
                  break
                else
                  echo "Cleanup successful; disk usage is now ${disk_usage}%."
                fi
              fi

              sleep 5
            done
          }

          # Start the monitor in the background.
          monitor &
          monitor_pid=$!

          # Start notebook execution in the background.
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log &
          nb_pid=$!

          # Wait for the notebook process to finish and capture its exit code.
          wait $nb_pid
          rc=$?
          kill $monitor_pid 2>/dev/null

          # Normalize exit code 143 to 1.
          if [ $rc -eq 143 ]; then
            echo "Notebook process terminated with exit code 143, forcing exit code 1"
            rc=1
          fi

          # Check output log for error messages.
          if grep -q "Kernel died" output.log || \
             grep -q "exit code 143" output.log || \
             grep -q "Terminated" output.log || \
             grep -q "Received termination signal" output.log || \
             grep -q "Memory usage is at" output.log || \
             grep -q "Disk usage is at" output.log || \
             grep -q "No space left on device" output.log; then
            echo "Notebook execution error detected in ${{ matrix.notebook }}"
            exit 1
          fi

          exit $rc
          EOF
          chmod +x run_notebook.sh
          ./run_notebook.sh
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"
      - name: Collect failures
        id: collect_failures
        run: |
          if [ "${{ job.status }}" == "failure" ]; then
            echo "${{ matrix.notebook }}" >> failed_ubuntu.txt
          fi
          echo "::set-output name=failedList::$(cat failed_ubuntu.txt || true)"

#####################################################
# 3. Second Attempt: Run Notebooks on 16GB Runner
#####################################################
  run-notebooks-16gb:
    name: Run Notebooks on jwst-pipeline-notebooks-16gb
    needs: run-notebooks-ubuntu
    if: needs.run-notebooks-ubuntu.outputs.failedList != ''
    runs-on: jwst-pipeline-notebooks-16gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.run-notebooks-ubuntu.outputs.failedList) }}
      fail-fast: false
    continue-on-error: true
    outputs:
      failedList: ${{ steps.collect_failures.outputs.failedList }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          [ -f "$nb_dir/pre-requirements.sh" ] && chmod +x "$nb_dir/pre-requirements.sh" && "$nb_dir/pre-requirements.sh"
          [ -f "$nb_dir/pre-requirements.txt" ] && pip install -r "$nb_dir/pre-requirements.txt"
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook with Resource Monitoring (16GB)
        id: exec16
        run: |
          cat << 'EOF' > run_notebook.sh
          #!/usr/bin/env bash
          MEM_THRESHOLD=80
          DISK_THRESHOLD=90
          CLEANUP_DISK_THRESHOLD=85

          trap 'echo "Received termination signal"; exit 1' SIGTERM SIGINT

          monitor() {
            while true; do
              mem_usage=$(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')
              if [ "$mem_usage" -gt "$MEM_THRESHOLD" ]; then
                echo "Memory usage is at ${mem_usage}%, exceeding threshold of ${MEM_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              fi
              disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
              if [ "$disk_usage" -gt "$DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding threshold of ${DISK_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              elif [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding cleanup threshold of ${CLEANUP_DISK_THRESHOLD}%. Attempting cleanup."
                rm -rf ~/.cache/pip || echo "Unable to clean pip cache"
                sleep 2
                disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
                if [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                  echo "After cleanup, disk usage is still at ${disk_usage}%. Aborting notebook execution."
                  kill $nb_pid 2>/dev/null
                  break
                else
                  echo "Cleanup successful; disk usage is now ${disk_usage}%."
                fi
              fi
              sleep 5
            done
          }

          monitor &
          monitor_pid=$!

          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log &
          nb_pid=$!

          wait $nb_pid
          rc=$?
          kill $monitor_pid 2>/dev/null

          if [ $rc -eq 143 ]; then
            echo "Notebook process terminated with exit code 143, forcing exit code 1"
            rc=1
          fi

          if grep -q "Kernel died" output.log || \
             grep -q "exit code 143" output.log || \
             grep -q "Terminated" output.log || \
             grep -q "Received termination signal" output.log || \
             grep -q "Memory usage is at" output.log || \
             grep -q "Disk usage is at" output.log || \
             grep -q "No space left on device" output.log; then
            echo "Notebook execution error detected in ${{ matrix.notebook }}"
            exit 1
          fi

          exit $rc
          EOF
          chmod +x run_notebook.sh
          ./run_notebook.sh
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"
      - name: Collect failures
        id: collect_failures
        run: |
          if [ "${{ job.status }}" == "failure" ]; then
            echo "${{ matrix.notebook }}" >> failed_16gb.txt
          fi
          echo "::set-output name=failedList::$(cat failed_16gb.txt || true)"

#####################################################
# 4. Third Attempt: Run Notebooks on 32GB Runner
#####################################################
  run-notebooks-32gb:
    name: Run Notebooks on jwst-pipeline-notebooks-32gb
    needs: run-notebooks-16gb
    if: needs.run-notebooks-16gb.outputs.failedList != ''
    runs-on: jwst-pipeline-notebooks-32gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.run-notebooks-16gb.outputs.failedList) }}
      fail-fast: false
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          [ -f "$nb_dir/pre-requirements.sh" ] && chmod +x "$nb_dir/pre-requirements.sh" && "$nb_dir/pre-requirements.sh"
          [ -f "$nb_dir/pre-requirements.txt" ] && pip install -r "$nb_dir/pre-requirements.txt"
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook with Resource Monitoring (32GB)
        run: |
          cat << 'EOF' > run_notebook.sh
          #!/usr/bin/env bash
          MEM_THRESHOLD=80
          DISK_THRESHOLD=90
          CLEANUP_DISK_THRESHOLD=85

          trap 'echo "Received termination signal"; exit 1' SIGTERM SIGINT

          monitor() {
            while true; do
              mem_usage=$(free | awk '/^Mem/ {printf("%d", 100*$3/$2)}')
              if [ "$mem_usage" -gt "$MEM_THRESHOLD" ]; then
                echo "Memory usage is at ${mem_usage}%, exceeding threshold of ${MEM_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              fi
              disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
              if [ "$disk_usage" -gt "$DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding threshold of ${DISK_THRESHOLD}%. Aborting notebook execution."
                kill $nb_pid 2>/dev/null
                break
              elif [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                echo "Disk usage is at ${disk_usage}%, exceeding cleanup threshold of ${CLEANUP_DISK_THRESHOLD}%. Attempting cleanup."
                rm -rf ~/.cache/pip || echo "Unable to clean pip cache"
                sleep 2
                disk_usage=$(df / | awk 'END {print $5}' | sed 's/%//')
                if [ "$disk_usage" -gt "$CLEANUP_DISK_THRESHOLD" ]; then
                  echo "After cleanup, disk usage is still at ${disk_usage}%. Aborting notebook execution."
                  kill $nb_pid 2>/dev/null
                  break
                else
                  echo "Cleanup successful; disk usage is now ${disk_usage}%."
                fi
              fi
              sleep 5
            done
          }

          monitor &
          monitor_pid=$!

          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log &
          nb_pid=$!

          wait $nb_pid
          rc=$?
          kill $monitor_pid 2>/dev/null

          if [ $rc -eq 143 ]; then
            echo "Notebook process terminated with exit code 143, forcing exit code 1"
            rc=1
          fi

          if grep -q "Kernel died" output.log || \
             grep -q "exit code 143" output.log || \
             grep -q "Terminated" output.log || \
             grep -q "Received termination signal" output.log || \
             grep -q "Memory usage is at" output.log || \
             grep -q "Disk usage is at" output.log || \
             grep -q "No space left on device" output.log; then
            echo "Notebook execution error detected in ${{ matrix.notebook }}"
            exit 1
          fi

          exit $rc
          EOF
          chmod +x run_notebook.sh
          ./run_notebook.sh
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"

####################################################
# 5. Final Check: Fail if Any Notebook Still Fails
####################################################
  final-check:
    name: Final Failure Check
    needs: [run-notebooks-ubuntu, run-notebooks-16gb, run-notebooks-32gb]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Final Failure Check
        run: |
          echo "If any notebooks still failed after all attempts, failing the workflow."
          exit 1
