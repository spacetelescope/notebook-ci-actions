name: Scheduled Notebook Execution

on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

permissions: write-all

##############################
# 1. Gather notebooks to test
##############################
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          # Find all .ipynb files under the notebooks folder.
          notebooks=$(find notebooks -name "*.ipynb" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=$notebooks" >> $GITHUB_OUTPUT

#############################################################
# 2. First attempt: run notebooks on ubuntu-latest runner
#############################################################
  run-notebooks-ubuntu:
    name: Run Notebooks on ubuntu-latest
    needs: gather-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
      fail-fast: false
    # We let failures continue so we can collect which notebooks “kernel died”
    continue-on-error: true
    outputs:
      # (In a full solution you’d aggregate the list of notebooks that failed because of “Kernel died”)
      failedList: ${{ steps.collect_failures.outputs.failedList }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/pre-requirements.sh" ]; then
            chmod +x "$nb_dir/pre-requirements.sh"
            "$nb_dir/pre-requirements.sh"
          fi
          if [ -f "$nb_dir/pre-requirements.txt" ]; then
            pip install -r "$nb_dir/pre-requirements.txt"
          fi
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook
        id: exec
        run: |
          # Run the notebook and capture all output.
          set -o pipefail
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log
          # If the log contains "Kernel died" then exit with error.
          if grep -q "Kernel died" output.log || grep -q "exit code 143" output.log; then
            echo "Kernel died error detected in ${{ matrix.notebook }}"
            exit 1
          fi
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"
      - name: Collect failures
        id: collect_failures
        run: |
          # In a real solution, you could write the notebook path to a file if the previous steps failed.
          # For example, if the "Execute Notebook" step failed because of "Kernel died", append the notebook path.
          if [ ${{ job.status }} == "failure" ]; then
            echo "${{ matrix.notebook }}" >> failed_ubuntu.txt
          fi
          # For simplicity, output the file content (or an empty string if none).
          if [ -f failed_ubuntu.txt ]; then
            cat failed_ubuntu.txt
          fi
          echo "::set-output name=failedList::$(cat failed_ubuntu.txt || true)"
          
##############################################################################
# 3. Second attempt: run (failed) notebooks on the 16GB runner (if needed)
##############################################################################
  run-notebooks-16gb:
    name: Run Notebooks on jwst-pipeline-notebooks-16gb
    needs: run-notebooks-ubuntu
    # (Ideally, run only if any notebooks failed with "Kernel died")
    if: needs.run-notebooks-ubuntu.outputs.failedList != ''
    runs-on: jwst-pipeline-notebooks-16gb
    strategy:
      # In a full solution, use the collected list from the previous job to form the matrix.
      matrix:
        notebook: ${{ fromJson(needs.run-notebooks-ubuntu.outputs.failedList) }}
      fail-fast: false
    continue-on-error: true
    outputs:
      failedList: ${{ steps.collect_failures.outputs.failedList }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/pre-requirements.sh" ]; then
            chmod +x "$nb_dir/pre-requirements.sh"
            "$nb_dir/pre-requirements.sh"
          fi
          if [ -f "$nb_dir/pre-requirements.txt" ]; then
            pip install -r "$nb_dir/pre-requirements.txt"
          fi
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook (16GB)
        id: exec16
        run: |
          set -o pipefail
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log
          if grep -q "Kernel died" output.log || grep -q "exit code 143" output.log; then
            echo "Kernel died error detected in ${{ matrix.notebook }}"
            exit 1
          fi
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"
      - name: Collect failures
        id: collect_failures
        run: |
          if [ ${{ job.status }} == "failure" ]; then
            echo "${{ matrix.notebook }}" >> failed_16gb.txt
          fi
          echo "::set-output name=failedList::$(cat failed_16gb.txt || true)"
          
##############################################################################
# 4. Third attempt: run (still failed) notebooks on the 32GB runner (if needed)
##############################################################################
  run-notebooks-32gb:
    name: Run Notebooks on jwst-pipeline-notebooks-32gb
    needs: run-notebooks-16gb
    if: needs.run-notebooks-16gb.outputs.failedList != ''
    runs-on: jwst-pipeline-notebooks-32gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.run-notebooks-16gb.outputs.failedList) }}
      fail-fast: false
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
      - name: Add conda to system path
        run: echo "$CONDA/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          nb_dir=$(dirname "${{ matrix.notebook }}")
          if [ -f "$nb_dir/pre-requirements.sh" ]; then
            chmod +x "$nb_dir/pre-requirements.sh"
            "$nb_dir/pre-requirements.sh"
          fi
          if [ -f "$nb_dir/pre-requirements.txt" ]; then
            pip install -r "$nb_dir/pre-requirements.txt"
          fi
          pip install -r "$nb_dir/requirements.txt"
          pip install pytest nbval nbconvert ipython bandit
      - name: Execute Notebook (32GB)
        run: |
          set -o pipefail
          jupyter nbconvert --template classic --to html --execute "${{ matrix.notebook }}" 2>&1 | tee output.log
          if grep -q "Kernel died" output.log || grep -q "exit code 143" output.log; then
            echo "Kernel died error detected in ${{ matrix.notebook }}"
            exit 1
          fi
      - name: Validate Notebook
        if: success()
        run: pytest --nbval "${{ matrix.notebook }}"
      - name: Scan with Bandit
        if: success()
        run: |
          jupyter nbconvert --to script "${{ matrix.notebook }}"
          pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
          bandit -lll -iii "$pyfile"

###########################################################
# 5. Final check: if any notebook still failed, fail the run.
###########################################################
  final-check:
    name: Final Failure Check
    needs: [run-notebooks-ubuntu, run-notebooks-16gb, run-notebooks-32gb]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Fail if any notebooks still failed due to Kernel died
        run: |
          # In a complete implementation, you would aggregate the failed notebook lists from prior jobs.
          # For this example, we simply print a message.
          echo "If any notebook still failed with 'Kernel died' after all attempts, this step should exit with an error."
          # exit 1  <-- Uncomment this if you determine failures remain.
