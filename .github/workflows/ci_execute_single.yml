name: Execute Single File w/os matrix
on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
      filename:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

jobs:
  find_notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebook_list: ${{ steps.find.outputs.notebook_list }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Find notebook files
      id: find
      run: |
        notebook_files=$(find notebooks -name ${{ inputs.filename }} | jq -R -s -c 'split("\n")[:-1]')
        #echo "::set-output name=notebook_list::$notebook_files"
        echo "notebook_list=$notebook_files" >>$GITHUB_OUTPUT

  tests:
    needs: find_notebooks
    runs-on: ubuntu-latest
    outputs:
      executed_notebooks: ${{ steps.execute.outputs.executed_notebooks }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-12]
        notebook: ${{fromJson(needs.find_notebooks.outputs.notebook_list)}}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        
    - name: Add conda to system path
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH
        
        
    - name: Install dependencies
      run: |
        ## Install the local requirements file
        echo DEBUG ---
        pwd ## print working directory
        echo "Path to req's: $(dirname ${{ matrix.notebook }})/requirements.txt"
        ls $(dirname ${{ matrix.notebook }})
        echo ---
        if [ -f $(dirname "${{ matrix.notebook }}")/pre-requirements.sh ]; then
          chmod +x $(dirname "${{ matrix.notebook }}")/pre-requirements.sh
          ./$(dirname "${{ matrix.notebook }}")/pre-requirements.sh
        fi
        if [ -f pre-requirements.txt ]; then
          pip install -r pre-requirements.txt
        fi
        if [ -f $(dirname "${{ matrix.notebook }}")/pre-install.sh ]; then
          chmod +x $(dirname "${{ matrix.notebook }}")/pre-install.sh
          ./$(dirname "${{ matrix.notebook }}")/pre-install.sh
        fi
        #pip install -r $(dirname "${{ matrix.notebook }}")/requirements.txt
        pip install -r $(dirname ${{ matrix.notebook }})/requirements.txt
        pip install pytest
        pip install nbval
        pip install nbconvert
        pip install bandit
        if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda create --yes --solver=classic -n hstcal -c conda-forge hstcal          
        fi
        
    - name: Validate notebooks 
      run: |
       if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda init
          conda activate hstcal
       fi
       export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
       export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
       jupyter nbconvert --clear-output --inplace "${{ matrix.notebook }}" 
       pytest --nbval --nbval-cell-timeout 4000 "${{ matrix.notebook }}" 
       
    - name: Execute notebooks
      id: execute
      run: |
       if [ "${GITHUB_REPOSITORY}" == "spacetelescope/hst_notebooks" ]; then
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda init
          conda activate hstcal
       fi        
        export CASJOBS_PW=${{ secrets.CASJOBS_PW }}
        export CASJOBS_USERID=${{ secrets.CASJOBS_USERID }}
        if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebook }}; then
          python .github/scripts/insert_failure_message.py ${{ matrix.notebook }}
        fi

    - name: Scan with Bandit
      run: |
        pip install ipython
        jupyter nbconvert --to script ${{ matrix.notebook }}
        pyfile=$(echo "${{ matrix.notebook }}" | sed 's/\.ipynb$/.py/')
        bandit -lll -iii $pyfile
