name: Manual Full Archive Execution/HTML Gen/Deply
on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false
          
env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

jobs:
  find_notebooks:
    runs-on: ubuntu-20.04
    outputs:
      notebook_list: ${{ steps.find.outputs.notebook_list }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Find notebook files
      id: find
      run: |
        notebook_files=$(find notebooks -name "*.ipynb" | jq -R -s -c 'split("\n")[:-1]')
        #echo "::set-output name=notebook_list::$notebook_files"
        echo "notebook_list=$notebook_files" >>$GITHUB_OUTPUT

  tests:
    needs: find_notebooks
    runs-on: ubuntu-20.04
    outputs:
      executed_notebooks: ${{ steps.execute.outputs.executed_notebooks }}
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{fromJson(needs.find_notebooks.outputs.notebook_list)}}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
          
    - name: Set up micromamba and install dependencies
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: hstcal
        create-args: >-
          -c conda-forge
          python=${{ inputs.python-version }}
          setuptools=65.5.1
          numpy=1.26.0
          hstcal
          jupyter
          pytest
          nbval
          nbconvert

    
    - name: Set up Python ${{ inputs.python-version }}
      uses: astral-sh/setup-uv@v6.0.1
      with:
        version: "0.7.3"
        python-version: ${{ inputs.python-version }}
        enable-cache: true
    
    - name: Install dependencies
      env:
        PYDEVD_DISABLE_FILE_VALIDATION: 1
        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
      run: |
        eval "$(micromamba shell hook -s posix)"
        micromamba activate hstcal
        
        # Verify numpy version (for debugging)
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        
        echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
        ls $(dirname ${{ matrix.notebooks }})
        echo ---
        if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
          chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
          ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
        fi
        if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
          chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
        fi
        if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
          uv pip install --system --no-build-isolation -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
        fi
        if [ -f $(dirname ${{ matrix.notebooks }})/requirements.txt ]; then
          uv pip install --system --no-build-isolation -r $(dirname ${{ matrix.notebooks }})/requirements.txt
        fi         
        
        uv pip install --system pytest
        uv pip install --system nbval
        uv pip install --system nbconvert

    - name: Monitor memory and disk usage every 10 seconds
      run: |
        while true; do
          # Memory usage
          memory=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
          echo "Memory Usage: $memory%"
          
          # Disk usage
          disk=$(df / | grep / | awk '{print $5}')
          echo "Disk Usage: $disk"
          
          sleep 10
        done &  # Run in background

    - name: Validate notebooks
      run: |
        eval "$(micromamba shell hook -s posix)"
        micromamba activate hstcal
        jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
        pytest --nbval --nbval-cell-timeout 4000 "${{ matrix.notebooks }}"

    - name: Execute notebooks
      id: execute
      run: |
        eval "$(micromamba shell hook -s posix)"
        micromamba activate hstcal
        if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
          python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
        fi
          
    - name: Archive executed notebooks
      run: |
        if [ "${{ matrix.notebooks }}" != "notebooks/preimaging/preimaging_01_mirage.ipynb" ]; then
          git config pull.rebase false
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git checkout -b gh-storage
          git add ${{ matrix.notebooks }}
          git commit -m 'Added executed notebook ${{ matrix.notebooks }}'
          # Pull the latest history to avoid conflicts, using ours strategy to favor current changes
          git pull origin gh-storage -s recursive -X ours --allow-unrelated-histories
      
          MAX_RETRIES=3
          DELAY_BETWEEN_RETRIES=5
          RETRY_COUNT=0
          PUSH_SUCCESS=0
    
          # Loop to retry the force push if it fails
          until git push -f origin gh-storage; do
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Push failed after $MAX_RETRIES retries."
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Push failed, attempt $RETRY_COUNT/$MAX_RETRIES. Retrying in $DELAY_BETWEEN_RETRIES seconds..."
            sleep $DELAY_BETWEEN_RETRIES
            # Fetch the latest remote changes before retrying
            git fetch origin gh-storage
            git checkout -B gh-storage origin/gh-storage
            git rm --cached -r .
            git clean -fdx
            # Re-add the notebook and commit it
            git add ${{ matrix.notebook }}
            git commit -m "Replace executed notebook ${{ matrix.notebooks }}"
          done
        fi
        
  generate_html:
    needs: tests
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ inputs.python-version }}
      uses: astral-sh/setup-uv@v6.0.1
      with:
        version: "0.7.3"
        python-version: ${{ inputs.python-version }}
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv pip install jupyter-book

    - name: Build HTML
      run: |
        git fetch
        git checkout origin/gh-storage -- notebooks/
        uv run jupyter-book build .
        

    # Push the book's HTML to github-pages
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_build/html
