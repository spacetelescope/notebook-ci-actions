name: Scaled - Execute Jupyter Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebook_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all notebooks
        id: set-matrix
        run: |
          # Ensure the notebooks directory exists
          mkdir -p notebooks
          
          # Find notebooks and handle empty case
          NOTEBOOKS=$(find notebooks/ -type f -name "*.ipynb")
          if [ -z "$NOTEBOOKS" ]; then
            echo "No notebooks found, creating empty matrix"
            echo "matrix={\"notebook\": []}" > matrix.json
          else
            # Convert find output to JSON array
            echo "$NOTEBOOKS" | jq -R . | jq -s . > notebooks.json
            echo "matrix={\"notebook\": $(cat notebooks.json)}" > matrix.json
          fi
          
          # Debug output
          echo "Generated matrix:"
          cat matrix.json
          
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  execute-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-notebooks.outputs.notebook_matrix) }}
    outputs:
      needs_larger_runner: ${{ steps.execute.outputs.needs_larger_runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          pip install nbconvert
          NOTEBOOK_DIR=$(dirname "${{ matrix.notebook }}")
          if [ -f "$NOTEBOOK_DIR/requirements.txt" ]; then
            pip install -r "$NOTEBOOK_DIR/requirements.txt"
          fi

      - name: Execute notebook with resource monitoring
        id: execute
        run: |
          # Create a script to monitor resources and execute notebook
          cat > monitor.sh << 'EOF'
          #!/bin/bash
          notebook_path="$1"
          
          # Start notebook conversion in background
          jupyter nbconvert --to notebook --execute --inplace "$notebook_path" &
          pid=$!
          
          # Monitor resources while process is running
          while kill -0 $pid 2>/dev/null; do
            MEMORY_USAGE=$(free -m | awk 'NR==2{printf "%.2f", $3*100/$2}')
            DISK_USAGE=$(df -h / | awk 'NR==2{printf "%.2f", $5}' | tr -d '%')
            
            if (( $(echo "$MEMORY_USAGE > 80" | bc -l) )) || (( $(echo "$DISK_USAGE > 80" | bc -l) )); then
              echo "Resource limit exceeded"
              echo "needs_larger_runner=true" >> $GITHUB_OUTPUT
              kill $pid
              exit 1
            fi
            sleep 1
          done
          
          # Wait for process to complete and check exit status
          wait $pid
          if [ $? -eq 0 ]; then
            echo "needs_larger_runner=false" >> $GITHUB_OUTPUT
          fi
          exit $?
          EOF
          
          chmod +x monitor.sh
          ./monitor.sh "${{ matrix.notebook }}"

  execute-on-larger-runner:
    needs: [find-notebooks, execute-notebooks]
    if: needs.execute-notebooks.outputs.needs_larger_runner == 'true'
    runs-on: 
      group: jwst-pipeline-notebooks-16gb
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-notebooks.outputs.notebook_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies on larger runner
        run: |
          pip install nbconvert
          NOTEBOOK_DIR=$(dirname "${{ matrix.notebook }}")
          if [ -f "$NOTEBOOK_DIR/requirements.txt" ]; then
            pip install -r "$NOTEBOOK_DIR/requirements.txt"
          fi

      - name: Execute notebook on larger runner
        run: |
          jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebook }}"
