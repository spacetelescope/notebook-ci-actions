name: Scaled - Execute Jupyter Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebook_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all Jupyter notebooks
        id: set-matrix
        run: |
          notebooks=$(find notebooks/ -type f -name "*.ipynb" | jq -R . | jq -s .)
          echo "matrix={\"notebook\": $notebooks}" > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  execute-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.find-notebooks.outputs.notebook_matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install nbconvert
        run: pip install nbconvert

      - name: Install notebook-specific requirements
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.notebook }}")
          if [ -f "$NOTEBOOK_DIR/requirements.txt" ]; then
            pip install -r "$NOTEBOOK_DIR/requirements.txt"
          fi

      - name: Execute notebook with resource monitoring
        id: execute
        run: |
          cat > monitor.sh << 'EOF'
          #!/bin/bash
          notebook="$1"
          jupyter nbconvert --to notebook --execute --inplace "$notebook" &
          pid=$!
          while kill -0 $pid 2>/dev/null; do
            mem_usage=$(free | awk '/Mem/{printf "%.2f", $3/$2 * 100.0}')
            disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
            if (( $(echo "$mem_usage > 80" | bc -l) )) || (( disk_usage > 80 )); then
              echo "Resource limit exceeded: Memory $mem_usage%, Disk $disk_usage%"
              kill $pid
              echo "needs_larger" > status.txt
              exit 1
            fi
            sleep 5
          done
          wait $pid
          status=$?
          if [ $status -eq 0 ]; then
            echo "success" > status.txt
          else
            echo "failed" > status.txt
          fi
          EOF
          chmod +x monitor.sh
          ./monitor.sh "${{ matrix.notebook }}"

      - name: Upload execution status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: status-${{ matrix.notebook }}
          path: status.txt

  aggregate-status:
    needs: execute-notebooks
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.process.outputs.matrix }}
    steps:
      - name: Download all status artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Process execution statuses
        id: process
        run: |
          NEEDS_LARGER=()
          for file in $(find artifacts -name status.txt); do
            dir=$(dirname "$file")
            status_name=$(basename "$dir")
            notebook=${status_name#status-}
            STATUS=$(cat "$file")
            if [ "$STATUS" == "needs_larger" ]; then
              NEEDS_LARGER+=("$notebook")
            fi
          done
          JSON=$(printf '%s\n' "${NEEDS_LARGER[@]}" | jq -R . | jq -s .)
          echo "matrix={\"notebook\": $JSON}" > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  execute-on-larger-runner:
    needs: aggregate-status
    if: needs.aggregate-status.outputs.matrix != '{\"notebook\": []}'
    runs-on: 16gb-runner
    strategy:
      matrix: ${{ fromJson(needs.aggregate-status.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install nbconvert
        run: pip install nbconvert

      - name: Install notebook-specific requirements
        run: |
          NOTEBOOK_DIR=$(dirname "${{ matrix.notebook }}")
          if [ -f "$NOTEBOOK_DIR/requirements.txt" ]; then
            pip install -r "$NOTEBOOK_DIR/requirements.txt"
          fi

      - name: Execute notebook on larger runner
        run: jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebook }}"
