name: Manual Full Archive Execution/HTML Gen/Deply
on:
  workflow_call:
    inputs:  
      python-version:
        required: true
        type: string
      filename:
        required: true
        type: string
    secrets:
      CASJOBS_USERID:
        description: 'CASJOBS user ID'
        required: false
      CASJOBS_PW:
        description: 'CASJOBS password'
        required: false

jobs:
  find_notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebook_list: ${{ steps.find.outputs.notebook_list }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Find notebook files
      id: find
      run: |
        notebook_files=$(find notebooks -name ${{ inputs.filename }} | jq -R -s -c 'split("\n")[:-1]')
        #echo "::set-output name=notebook_list::$notebook_files"
        echo "notebook_list=$notebook_files" >>$GITHUB_OUTPUT

  tests:
    needs: find_notebooks
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{ fromJson(needs.find_notebooks.outputs.notebook_list) }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - name: Set up micromamba and install dependencies
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: hstcal
          create-args: >-
            -c conda-forge
            python=${{ inputs.python-version }}
            setuptools=65.5.1
            numpy=1.26.0
            hstcal
            jupyter
            pytest
            nbval
            nbconvert
            bandit
            

      
      - name: Set up Python ${{ inputs.python-version }}
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ inputs.python-version }}
          enable-cache: true
      
      - name: Install dependencies
        env:
          PYDEVD_DISABLE_FILE_VALIDATION: 1
          SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          
          # Verify numpy version (for debugging)
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
          fi
          if [ -f $(dirname ${{ matrix.notebooks }})/requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          fi         
          
          uv pip install --system pytest
          uv pip install --system nbval
          uv pip install --system nbconvert
          uv pip install --system bandit

      - name: Execute notebooks
        id: execute
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi

      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add ${{ matrix.notebooks }}
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

      - name: Checkout only the file to gh-storage
        run: |
          git checkout -f gh-storage
          git checkout @{-1} ${{ matrix.notebooks }}

      - name: Commit and push modifications to gh-storage
        run: |
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

          MAX_RETRIES=5
          RETRY_DELAY=10s
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  generate_html:
    needs: tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        
    - name: Install dependencies
      run: |
        pip install jupyter-book==v0.15.1

    - name: Build HTML
      run: |
        git fetch
        git checkout origin/gh-storage -- notebooks/
        jupyter-book build .

    - name: Execute JDAVIZ placeholder substitution
      if: github.repository == 'spacetelescope/jdat_notebooks' ## this will only run on jdat_notebook repository
      run: |
        cp jdaviz_placeholder_new.png _build/html  
        chmod +x placeholder.sh
        placeholder.sh

    # Push the book's HTML to github-pages
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_build/html
