#!/bin/bash
# Setup script for migrating to the unified notebook CI/CD system
# This script helps repositories migrate from existing CI to the unified system

set -e

echo "🚀 Unified Notebook CI/CD Migration Setup"
echo "========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
REPO_TYPE=""
PYTHON_VERSION="3.11"
CONDA_ENV=""
BACKUP_DIR=".github/workflows-backup"
CUSTOM_SCRIPT=""

# Function to print colored output
print_status() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${NC}"
}

# Function to prompt user for input
prompt_user() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [[ -n "$default" ]]; then
        read -p "$prompt [$default]: " user_input
        eval "$var_name=\"${user_input:-$default}\""
    else
        read -p "$prompt: " user_input
        eval "$var_name=\"$user_input\""
    fi
}

# Function to detect repository type
detect_repo_type() {
    print_status "$BLUE" "🔍 Detecting repository type..."
    
    if [[ -f "environment.yml" ]] && grep -q "hstcal" environment.yml 2>/dev/null; then
        REPO_TYPE="hst"
        CONDA_ENV="hstcal"
        print_status "$GREEN" "Detected: HST Notebooks Repository"
    elif [[ -f "environment.yml" ]] && grep -q "stenv" environment.yml 2>/dev/null; then
        REPO_TYPE="jwst"
        CONDA_ENV="stenv"
        print_status "$GREEN" "Detected: JWST Notebooks Repository"
    elif find . -name "*.ipynb" -path "./notebooks/*" | head -1 | grep -q "."; then
        REPO_TYPE="standard"
        print_status "$GREEN" "Detected: Standard Notebook Repository"
    else
        REPO_TYPE="custom"
        print_status "$YELLOW" "Could not auto-detect repository type"
    fi
}

# Function to backup existing workflows
backup_workflows() {
    print_status "$BLUE" "💾 Backing up existing workflows..."
    
    if [[ -d ".github/workflows" ]]; then
        mkdir -p "$BACKUP_DIR"
        cp .github/workflows/*.yml "$BACKUP_DIR/" 2>/dev/null || true
        print_status "$GREEN" "Backed up existing workflows to $BACKUP_DIR"
    else
        print_status "$YELLOW" "No existing workflows found to backup"
    fi
}

# Function to remove old workflows
remove_old_workflows() {
    print_status "$BLUE" "🗑️  Removing old workflow files..."
    
    local old_workflows=(
        ".github/workflows/notebook-ci-pr.yml"
        ".github/workflows/notebook-ci-pr-selective.yml"
        ".github/workflows/notebook-ci-main.yml"
        ".github/workflows/notebook-ci-main-selective.yml"
        ".github/workflows/notebook-ci-on-demand.yml"
    )
    
    for workflow in "${old_workflows[@]}"; do
        if [[ -f "$workflow" ]]; then
            rm "$workflow"
            print_status "$GREEN" "Removed: $workflow"
        fi
    done
}

# Function to create PR workflow
create_pr_workflow() {
    print_status "$BLUE" "📝 Creating PR workflow..."
    
    mkdir -p .github/workflows
    
    cat > .github/workflows/notebook-pr.yml << EOF
# Notebook CI - Pull Request Workflow
# Generated by unified CI/CD migration script

name: Notebook CI - Pull Request

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'notebooks/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '*.yml'
      - '*.yaml'
      - '*.md'
      - '*.html'
      - '*.css'
      - '*.js'

jobs:
  notebook-ci:
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'pr'
      python-version: '$PYTHON_VERSION'$(if [[ -n "$CONDA_ENV" ]]; then echo "
      conda-environment: '$CONDA_ENV'"; fi)
      enable-validation: true
      enable-security: true
      enable-execution: true
      enable-storage: true
      enable-html-build: false
    secrets:
      CASJOBS_USERID: \${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: \${{ secrets.CASJOBS_PW }}
EOF
    
    print_status "$GREEN" "Created: .github/workflows/notebook-pr.yml"
}

# Function to create merge workflow
create_merge_workflow() {
    print_status "$BLUE" "📝 Creating merge workflow..."
    
    cat > .github/workflows/notebook-merge.yml << EOF
# Notebook CI - Main Branch Workflow
# Generated by unified CI/CD migration script

name: Notebook CI - Main Branch

on:
  push:
    branches: [ main ]
    paths:
      - 'notebooks/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '*.yml'
      - '*.yaml'
      - '*.md'
      - '*.html'
      - '*.css'
      - '*.js'

jobs:
  notebook-ci-and-deploy:
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'merge'
      python-version: '$PYTHON_VERSION'$(if [[ -n "$CONDA_ENV" ]]; then echo "
      conda-environment: '$CONDA_ENV'"; fi)$(if [[ -n "$CUSTOM_SCRIPT" ]]; then echo "
      post-processing-script: '$CUSTOM_SCRIPT'"; fi)
      enable-validation: true
      enable-security: true
      enable-execution: true
      enable-storage: true
      enable-html-build: true
    secrets:
      CASJOBS_USERID: \${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: \${{ secrets.CASJOBS_PW }}
EOF
    
    print_status "$GREEN" "Created: .github/workflows/notebook-merge.yml"
}

# Function to create scheduled workflow
create_scheduled_workflow() {
    print_status "$BLUE" "📝 Creating scheduled workflow..."
    
    cat > .github/workflows/notebook-scheduled.yml << EOF
# Notebook CI - Scheduled Maintenance
# Generated by unified CI/CD migration script

name: Notebook CI - Scheduled Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

jobs:
  weekly-validation:
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'scheduled'
      python-version: '$PYTHON_VERSION'$(if [[ -n "$CONDA_ENV" ]]; then echo "
      conda-environment: '$CONDA_ENV'"; fi)
      enable-validation: true
      enable-security: true
      enable-execution: true
      enable-storage: false
      enable-html-build: false
      trigger-event: 'all'
    secrets:
      CASJOBS_USERID: \${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: \${{ secrets.CASJOBS_PW }}

  deprecation-check:
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'scheduled'
      trigger-event: 'deprecate'
      python-version: '$PYTHON_VERSION'
    secrets:
      CASJOBS_USERID: \${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: \${{ secrets.CASJOBS_PW }}
EOF
    
    print_status "$GREEN" "Created: .github/workflows/notebook-scheduled.yml"
}

# Function to create on-demand workflow
create_ondemand_workflow() {
    print_status "$BLUE" "📝 Creating on-demand workflow..."
    
    cat > .github/workflows/notebook-on-demand.yml << 'EOF'
# Notebook CI - On-Demand Actions
# Generated by unified CI/CD migration script

name: Notebook CI - On-Demand Actions

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'validate-all'
          - 'execute-all'
          - 'security-scan-all'
          - 'validate-single'
          - 'execute-single'
          - 'full-pipeline-all'
          - 'full-pipeline-single'
          - 'build-html-only'
          - 'deprecate-notebook'
        default: 'validate-all'
      
      single_notebook:
        description: 'Single notebook path (for single-notebook actions)'
        required: false
        type: string
        
      python_version:
        description: 'Python version'
        required: false
        type: string
        default: 'PYTHON_VERSION_PLACEHOLDER'
        
      conda_environment:
        description: 'Custom conda environment (optional)'
        required: false
        type: string
        default: 'CONDA_ENV_PLACEHOLDER'
        
      deprecation_days:
        description: 'Days until deprecation (for deprecate action)'
        required: false
        type: string
        default: '60'

jobs:
  validate-all:
    if: inputs.action_type == 'validate-all'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'validate'
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: true
      enable-security: false
      enable-execution: false
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  execute-all:
    if: inputs.action_type == 'execute-all'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'execute'
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: false
      enable-security: false
      enable-execution: true
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  security-scan-all:
    if: inputs.action_type == 'security-scan-all'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'security'
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: false
      enable-security: true
      enable-execution: false
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  validate-single:
    if: inputs.action_type == 'validate-single'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'validate'
      single-notebook: ${{ inputs.single_notebook }}
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: true
      enable-security: false
      enable-execution: false
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  execute-single:
    if: inputs.action_type == 'execute-single'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'execute'
      single-notebook: ${{ inputs.single_notebook }}
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: false
      enable-security: false
      enable-execution: true
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  full-pipeline-all:
    if: inputs.action_type == 'full-pipeline-all'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'all'
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: true
      enable-security: true
      enable-execution: true
      enable-storage: true
      enable-html-build: true
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  full-pipeline-single:
    if: inputs.action_type == 'full-pipeline-single'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'all'
      single-notebook: ${{ inputs.single_notebook }}
      python-version: ${{ inputs.python_version }}
      conda-environment: ${{ inputs.conda_environment }}
      enable-validation: true
      enable-security: true
      enable-execution: true
      enable-storage: true
      enable-html-build: true
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  build-html-only:
    if: inputs.action_type == 'build-html-only'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'html'
      python-version: ${{ inputs.python_version }}
      enable-validation: false
      enable-security: false
      enable-execution: false
      enable-storage: false
      enable-html-build: true
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}

  deprecate-notebook:
    if: inputs.action_type == 'deprecate-notebook'
    uses: mgough-970/dev-actions/.github/workflows/notebook-ci-unified.yml@dev-actions-v2
    with:
      execution-mode: 'on-demand'
      trigger-event: 'deprecate'
      single-notebook: ${{ inputs.single_notebook }}
      python-version: ${{ inputs.python_version }}
      deprecation-days: ${{ fromJSON(inputs.deprecation_days) }}
      enable-validation: false
      enable-security: false
      enable-execution: false
      enable-storage: false
      enable-html-build: false
    secrets:
      CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
      CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
EOF

    # Replace placeholders
    sed -i "s/PYTHON_VERSION_PLACEHOLDER/$PYTHON_VERSION/g" .github/workflows/notebook-on-demand.yml
    sed -i "s/CONDA_ENV_PLACEHOLDER/$CONDA_ENV/g" .github/workflows/notebook-on-demand.yml
    
    print_status "$GREEN" "Created: .github/workflows/notebook-on-demand.yml"
}

# Function to create migration summary
create_summary() {
    print_status "$BLUE" "📊 Creating migration summary..."
    
    cat > MIGRATION_SUMMARY.md << EOF
# Migration to Unified Notebook CI/CD System

This repository has been migrated to use the unified notebook CI/CD system.

## Migration Details

- **Date**: $(date)
- **Repository Type**: $REPO_TYPE
- **Python Version**: $PYTHON_VERSION$(if [[ -n "$CONDA_ENV" ]]; then echo "
- **Conda Environment**: $CONDA_ENV"; fi)$(if [[ -n "$CUSTOM_SCRIPT" ]]; then echo "
- **Custom Script**: $CUSTOM_SCRIPT"; fi)

## New Workflow Files

- \`.github/workflows/notebook-pr.yml\` - Pull request validation
- \`.github/workflows/notebook-merge.yml\` - Post-merge deployment
- \`.github/workflows/notebook-scheduled.yml\` - Weekly maintenance
- \`.github/workflows/notebook-on-demand.yml\` - Manual triggers

## Backup Location

Old workflow files have been backed up to: \`$BACKUP_DIR/\`

## Key Features

✅ **Smart Change Detection**: Only processes affected notebooks
✅ **Configurable Features**: Enable/disable validation, security, execution
✅ **Multiple Execution Modes**: PR, merge, scheduled, on-demand
✅ **Deprecation Management**: Automated notebook lifecycle management
✅ **Performance Optimized**: Docs-only detection, selective execution

## Usage

### Pull Requests
- Automatically triggers on PR creation/updates
- Validates and executes changed notebooks
- Stores outputs to \`gh-storage\` branch

### Main Branch
- Triggers on push to main branch
- Full validation and execution
- Builds and deploys HTML documentation

### Scheduled
- Runs weekly on Sunday at 2 AM UTC
- Validates all notebooks
- Manages deprecated notebooks

### On-Demand
- Manual workflow dispatch
- Multiple action options
- Single or all notebook targeting

## Next Steps

1. **Test the migration**: Create a test PR to verify the new workflows
2. **Update documentation**: Update your README with new workflow information
3. **Configure secrets**: Ensure CASJOBS_USERID and CASJOBS_PW are set if needed
4. **Customize settings**: Adjust workflow parameters as needed

## Rollback

If you need to rollback, restore files from \`$BACKUP_DIR/\` and remove the new workflow files.

## Support

For questions or issues, see:
- [Unified CI/CD Documentation](https://github.com/mgough-970/dev-actions)
- [Migration Guide](https://github.com/mgough-970/dev-actions/blob/main/docs/migration-guide-unified.md)
EOF
    
    print_status "$GREEN" "Created: MIGRATION_SUMMARY.md"
}

# Main migration process
main() {
    print_status "$GREEN" "Starting unified notebook CI/CD migration..."
    
    # Step 1: Detect repository type
    detect_repo_type
    
    # Step 2: Get user configuration
    print_status "$BLUE" "⚙️  Configuration"
    prompt_user "Python version" "$PYTHON_VERSION" "PYTHON_VERSION"
    
    if [[ "$REPO_TYPE" == "custom" ]]; then
        prompt_user "Conda environment (leave empty for standard Python)" "" "CONDA_ENV"
    fi
    
    prompt_user "Post-processing script path (optional)" "" "CUSTOM_SCRIPT"
    
    # Step 3: Confirm migration
    print_status "$YELLOW" "\n📋 Migration Summary:"
    echo "  Repository Type: $REPO_TYPE"
    echo "  Python Version: $PYTHON_VERSION"
    [[ -n "$CONDA_ENV" ]] && echo "  Conda Environment: $CONDA_ENV"
    [[ -n "$CUSTOM_SCRIPT" ]] && echo "  Custom Script: $CUSTOM_SCRIPT"
    echo ""
    
    read -p "Proceed with migration? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        print_status "$YELLOW" "Migration cancelled"
        exit 0
    fi
    
    # Step 4: Perform migration
    backup_workflows
    remove_old_workflows
    create_pr_workflow
    create_merge_workflow
    create_scheduled_workflow
    create_ondemand_workflow
    create_summary
    
    print_status "$GREEN" "\n🎉 Migration completed successfully!"
    print_status "$BLUE" "\nNext steps:"
    echo "1. Review the generated workflow files"
    echo "2. Commit and test with a draft PR"
    echo "3. Check MIGRATION_SUMMARY.md for details"
    echo "4. Update your repository documentation"
    print_status "$YELLOW" "\nBackup files are in: $BACKUP_DIR"
}

# Run the migration
main "$@"
